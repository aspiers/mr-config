# -*- mode: sh -*-

lib =
    MR_GIT=$HOME/.GIT
    GIT_MY_ROOT=$MR_GIT/adamspiers.org
    MY_UPSTREAM_HOST=git.adamspiers.org
    #GIT_MY_UPSTREAM_HOME=ssh://$MY_UPSTREAM_HOST/home/adam/
    GIT_MY_UPSTREAM_HOME=arctic:
    GIT_MY_UPSTREAM=${GIT_MY_UPSTREAM_HOME}.GIT/adamspiers.org
    GIT_UPSTREAM_ROOT=$MR_GIT/3rd-party
    #
    check_repo_name () {
        [ -n "$MR_NAME" ] || error "\$MR_NAME not set for $MR_REPO"
    }
    git_email () {
        cd "$MR_REPO"
        email="${1:-${MR_EMAIL:-$MR_NAME}}@adamspiers.org"
        existing=$( git config user.email || true )
        if [ "$email" != "$existing" ]; then
            git config user.email "$email"
            info "Set user.email from ${existing:-(none)} to $email"
        fi
    }
    git_clone () {
        check_repo_name
        info "Cloning from $1"
        remote_opts=
        if [ -n "$MR_GIT_REMOTE" ]; then
            remote_opts="-o $MR_GIT_REMOTE"
            echo "Default remote is $MR_GIT_REMOTE"
        fi
        git clone $remote_opts "$1" "$MR_REPO"
        git_email "${2:-$MR_NAME}"
    }
    github_clone () {
        MR_GIT_REMOTE=github
        git_clone `github_url`
    }
    git_clone_my_repo () {
        check_repo_name
        MR_GIT_REMOTE=arctic
        git_clone "$GIT_MY_UPSTREAM/$MR_NAME" "${MR_EMAIL:-dotfiles}"
    }
    #
    moosehall_git_checkout () {
        if [ $# != 2 ]; then
            error "Usage: moosehall_git_checkout HUB-HOST REPO"
        fi
        hub="$1"
        repo="$2"
        read_localhost_nickname
        if [ "$hub" = "$localhost_nickname" ]; then
            if ! [ -d "$MR_REPO" ]; then
                error "This machine is supposed to be the hub for $MR_REPO but it didn't exist!"
            fi
        else
            MR_GIT_REMOTE=$hub
            git_clone $hub:$repo
        fi
    }
    #
    savannah_ro_url () {
        echo "git://git.sv.gnu.org/${1:-$MR_NAME}.git"
    }
    savannah_rw_url () {
        echo "ssh://aspiers@git.sv.gnu.org/srv/git/${1:-$MR_NAME}.git"
    }
    github_url () {
        echo "git@github.com:aspiers/${1:-${GITHUB_NAME:-$MR_NAME}}.git"
    }
    arctic_url () {
        echo "${GIT_MY_UPSTREAM_HOME}$repo"
    }
    #
    savannah_ro_remote () {
        git_add_remotes savannah `savannah_ro_url`
    }
    savannah_rw_remote () {
        git_add_remotes savannah `savannah_rw_url`
    }
    github_remote () {
        git_add_remotes github `github_url`
    }
    arctic_remote () {
        git_add_remotes arctic `arctic_url`
    }
    moosehall_remotes () {
        if not_moosehall; then
            return 0
        fi
        repo="${MR_REPO#$HOME/}"
        # Note: uses URL rewriting so we can decide independently
        # whether to fetch over wired/wireless or even ADSL.
        git_add_remotes "
        atlantic   atlantic:$repo
        southern   southern:$repo
        adriatic   adriatic:$repo
        mc     media-centre:$repo
        "
    }
    public_repo_remotes () {
        moosehall_remotes && arctic_remote && github_remote
    }
    private_repo_remotes () {
        moosehall_remotes && arctic_remote
    }
    work_remotes () {
        :
        # git_add_remotes "
        # "
    }
    auto_remotes () {
        if work_repo; then
            work_remotes
        elif confidential_repo; then
            private_repo_remotes
        else
            public_repo_remotes
        fi
    }
    #
    unsafe () {
        echo "Automatic $MR_ACTION via mr has been specified as unsafe for $MR_REPO"
    }

ge = git_email "$@"

git_update = git pull --ff-only "$@"
git_merge  = git pull "$@"
git_rebase = git pull -r "$@"
git_branch = ggb | grep '^\*'
