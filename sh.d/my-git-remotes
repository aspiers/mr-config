# -*- mode: sh -*-

savannah_ro_remote () {
    git_add_remote savannah `savannah_ro_url`
}

savannah_rw_remote () {
    git_add_remote savannah `savannah_rw_url`
}

github_clone_remote () {
    git_add_remote github `github_clone_url`
}

# usage: github_readonly_remote <REMOTE> [<USERNAME> [<REPONAME>]]
github_readonly_remote () {
    remote="$1"
    username="${2:-$remote}"
    reponame="$3"
    git_add_remote "$remote" `github_readonly_url "$username" "$reponame"`
}

# usage: github_readwrite_remote <REMOTE> [<USERNAME> [<REPONAME>]]
# required for (even read-only) forks of private repositories
github_readwrite_remote () {
    remote="$1"
    username="${2:-$remote}"
    reponame="$3"
    git_add_remote "$remote" `github_readwrite_url "$username" "$reponame"`
}

github_origin_remote () {
    git_add_remote origin `github_origin_url`
}

github_origin_rw_remote () {
    git_add_remote origin `github_origin_rw_url`
}

gitorious_clone_remote () {
    git_add_remote gitorious `gitorious_clone_url`
}

my_upstream_remote () {
    git_add_remote adamspiers.org `my_upstream_url`
}

moosehall_remotes () {
    if not_moosehall; then
        return 0
    fi
    repo="${MR_REPO#$HOME/}"
    # Note: uses URL rewriting so we can decide independently
    # whether to fetch over wired/wireless or even ADSL.
    git_add_remotes "
        atlantic REMOTE:${repo// /\\ }
        southern REMOTE:${repo// /\\ }
        adriatic REMOTE:${repo// /\\ }
        pacific  REMOTE:${repo// /\\ }
        indian   REMOTE:${repo// /\\ }
        mc       mediacentre:${repo// /\\ } mediacentre
    "
}

moosehall_work_remotes () {
    repo="${MR_REPO#$HOME/}"
    git_add_remotes "
        atlantic  REMOTE:${repo// /\\ }
        southern  REMOTE:${repo// /\\ }
        pacific   REMOTE:${repo// /\\ }
        indian    REMOTE:${repo// /\\ }
    "
}

auto_remotes () {
    if work_repo; then
        moosehall_work_remotes

        case "$MR_REPO" in
            */adamspiers.org/*)
                # something like novell+vpn.pub
                my_upstream_remote
                ;;
        esac
    else
        moosehall_remotes

        case "$MR_NAME" in
            mr)
                # No mr repo on adamspiers.org - ensure we get it from github
                ;;
            *)
                my_upstream_remote
                ;;
        esac
    fi

    if ! confidential_repo; then
        # only do this if cloned from local
        github_clone_remote
    fi

    # Ensure "origin" is included in the automatically generated
    # remotes.  The challenge is to determine at which upstream
    # service it should point (e.g. github, gitorious etc.).  During
    # cloning, set_git_clone_remote is called, so we know which
    # service the repo was cloned from.  However we also need to know
    # this post-clone, for re-runs of "mr remotes" etc.  It's
    # reasonable to assume that if this repo was cloned from a fork of
    # mine, the original it was forked from originates from the same
    # service.  But which service?  If called post-cloning, do we have
    # any way of knowing?  Previously there was a version of
    # MR_GIT_ORIGIN_USER for each service, so we could tell that
    # way.  FIXME: move definition of repo to clone from to lib,
    # so that we can access it post-cloning.
    #
    #echo "MR_GIT_CLONE_REMOTE is $MR_GIT_CLONE_REMOTE"
    #(cd $MR_REPO; git remote -v)
    if [ -n "$MR_GIT_ORIGIN_USER" ]; then
        github_origin_remote
    elif [ -n "$MR_GIT_ORIGIN_RW_USER" ]; then
        # Even do this for confidential repos, since could be a
        # private github repo (or a fork thereof).
        github_origin_rw_remote
    fi
}
