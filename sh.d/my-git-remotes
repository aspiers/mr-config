# -*- mode: sh -*-

my_upstream_remote () {
    git_add_remote adamspiers.org `my_upstream_url`
}

moosehall_remotes () {
    if not_moosehall; then
        return 0
    fi
    repo="${MR_REPO#$HOME/}"
    # quote spaces to avoid passing too many parameters to
    # git_add_remotes
    repo=$( echo "$repo" | sed 's/ /\\ /g' )

    # Note: uses URL rewriting so we can decide independently
    # whether to fetch over wired/wireless or even ADSL.
    git_add_remotes "
        southern REMOTE:$repo
        pacific  REMOTE:$repo
        indian   REMOTE:$repo
        mc       mediacentre:$repo mediacentre
        nuc      REMOTE:$repo
        arabian  REMOTE:$repo
        ionian   REMOTE:$repo
    "
}

moosehall_work_remotes () {
    repo="${MR_REPO#$HOME/}"
    # quote spaces to avoid passing too many parameters to
    # git_add_remotes
    repo=$( echo "$repo" | sed 's/ /\\ /g' )
    git_add_remotes "
        southern  REMOTE:$repo
        pacific   REMOTE:$repo
        indian    REMOTE:$repo
        arabian   REMOTE:$repo
        ionian    REMOTE:$repo
    "
}

auto_moosehall_remotes () {
    if work_repo; then
        moosehall_work_remotes
    else
        moosehall_remotes
    fi
}

auto_my_upstream_remote () {
    if work_repo; then
        case "$MR_REPO" in
            */adamspiers.org/*)
                # something like novell+vpn.pub
                my_upstream_remote
                ;;
        esac
    else
        case "$MR_NAME" in
            *)
                my_upstream_remote
                ;;
        esac
    fi
}

auto_personal_remotes () {
    auto_moosehall_remotes
    auto_my_upstream_remote
}

auto_external_remotes () {
    set_origin_remote

    if ! confidential_repo; then
        # only do this if cloned from local
        github_clone_remote
    fi
}

auto_remotes () {
    auto_personal_remotes
    auto_external_remotes
}

set_origin_remote () {
    # Ensure "origin" is included in the automatically generated
    # remotes.  The challenge is to determine at which upstream
    # service it should point (e.g. github, gitorious etc.).  During
    # cloning, set_git_clone_remote is called, so we know which
    # service the repo was cloned from.  However we also need to know
    # this post-clone, for re-runs of "mr remotes" etc.  It's
    # reasonable to assume that if this repo was cloned from a fork of
    # mine, the original it was forked from originates from the same
    # service.  But which service?  If called post-cloning, do we have
    # any way of knowing?  Previously there was a version of
    # MR_GIT_ORIGIN_USER for each service, so we could tell that
    # way.  For now let's just use some heuristics based on the
    # remotes.
    auto_detect_git_service

    if [ -n "$MR_GIT_ORIGIN_USER" ]; then
        case "$MR_GIT_SERVICE" in
            gitlab-suse-de)
                gitlab_origin_remote
                ;;
            github)
                github_origin_remote
                ;;
        esac
    elif [ -n "$MR_GIT_ORIGIN_RW_USER" ]; then
        # Even do this for confidential repos, since could be a
        # private github repo (or a fork thereof).
        case "$MR_GIT_SERVICE" in
            gitlab-suse-de)
                gitlab_origin_rw_remote
                ;;
            github)
                github_origin_rw_remote
                ;;
        esac
    fi
}

# FIXME: move definition of upstream service / repo to clone from
# to lib section, so that we can access it post-cloning and determine
# these things without auto-detection heuristics.
auto_detect_git_service () {
    if git config remote.gitlab.url | grep -q suse; then
        MR_GIT_SERVICE=gitlab-suse-de
    elif git config remote.github.url | grep -q github; then
        MR_GIT_SERVICE=github
    else
        MR_GIT_SERVICE=unknown
        echo >&2 "WARNING: couldn't figure out what origin remote should be"
    fi
}
